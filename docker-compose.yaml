services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  dotnet_publisher:
    build:
      context: ./
      dockerfile: dotnet_publisher/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy

  dotnet_consumer:
    build:
      context: ./
      dockerfile: dotnet_consumer/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    environment:
      DB_HOST: postgresql
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
  
  postgresql:
    image: postgres
    restart: always
    container_name: postgresql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    
  pgadmin:
    build:
      context: pgadmin
      dockerfile: Dockerfile.pgadmin
    restart: always
    container_name: pgadmin
    ports:
      - "5050:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./pgadmin/servers.json.template:/pgadmin4/servers.json.template
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass.template:/pgadmin4/pgpass.template
      - ./pgadmin/pgpass:/pgadmin4/pgpass
      - ./pgadmin/init-pgadmin.sh:/init-pgadmin.sh
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 80
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    entrypoint: ["/init-pgadmin.sh"]
    depends_on:
      postgresql:
        condition: service_healthy

volumes:
  rabbitmq_data:
  postgresql_data:
  pgadmin: